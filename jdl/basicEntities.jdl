
entity User

entity Doctor {

}

entity Patient {

}

entity Accountant {

}

relationship OneToOne {
    Doctor{User} to User,
    Patient{User} to User,
    Accountant{User} to User
}

// Daily intervals, vacations and other events which
// make a certain period unavailable may be 
// inserted as appointments

entity DoctorSchedule (DoctorSchedule) {
    appointmentsDurationMinutes Integer required,
    intervalBetweenAppointmentsMinutes Integer,
    earliestAppointmentTime Instant required,
    latestAppointmentTime Instant required,
    calendarId String
}

relationship OneToOne {
    DoctorSchedule{Doctor} to Doctor{DoctorSchedule}
}

relationship OneToMany {
    DoctorSchedule{AvailableWeekdays} to AvailableWeekdays
}

entity AvailableWeekdays {
    weekday Weekdays required
}

enum Weekdays {
    SUNDAY,
    MONDAY,
    TUESDAY,
    WEDNESDAY,
    THURSDAY,
    FRIDAY,
    SATURDAY
}

entity Appointment (Appointment) {
    startDate ZonedDateTime required,
    endDate ZonedDateTime required,
    description String,
    cancelled Boolean
}

relationship ManyToOne {
    Appointment{Patient} to Patient,
    Appointment{Doctor} to Doctor
}

entity PaymentInstallment {
    payDate LocalDate,
    dueDate LocalDate,
    value BigDecimal,
    installmentNumber Integer,
    checkNumber String,
    cardFinalNumber String,
}

entity CardBrand {
    name String required
}

entity PaymentMethod {
    name String required
}

relationship OneToOne {
    PaymentInstallment{PaymentMethod} to PaymentMethod
    PaymentInstallment{CardBrand} to CardBrand
}

entity Healthcare {
    name String
}

relationship OneToMany {
    Healthcare to PaymentInstallment{Healthcare}
    Appointment{PaymentInstallment} to PaymentInstallment{Appointment}
}

paginate Appointment with pagination
service DoctorSchedule with serviceImpl
angularSuffix * with TCC
